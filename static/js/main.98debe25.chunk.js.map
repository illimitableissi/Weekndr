{"version":3,"sources":["keys.js","Pages/HomePage.js","albums.js","Components/AfterHours.js","Components/Melancholy.js","Components/StarBoy.js","Components/Madness.js","Components/KissLand.js","Components/Trilogy.js","Components/Section.js","Pages/FullPage.js","App.js","serviceWorker.js","index.js"],"names":["exports","spotify","id","secret","HomePage","className","src","albums","albumName","cover","keys","require","Spotify","console","log","AfterHours","state","album","request","then","res","setState","items","catch","err","this","map","tracks","name","href","external_urls","React","Component","Melancholy","StarBoy","Madness","KissLand","Trilogy","Section","props","class","data-aos","data-aos-offset","FullPage","App","basename","process","to","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.98debe25.chunk.js","sourcesContent":["exports.spotify = {\r\n  id: \"ac73e18e77e9438f97bc664c8503b3cd\",\r\n  secret: \"1c84162373774c8cb85187e4c178afc6\"\r\n};","import React from 'react';\r\nimport '../Pages/style.css'\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"homeWrapper\">\r\n            <div className=\"container center\">\r\n            <img src=\"./images/xo.jpg\" id=\"weeknd\"></img>\r\n            <br></br>\r\n            <div className=\"row\">\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;","const albums = [\r\n    {\r\n        albumName: \"after hours.\",\r\n        spotify: \"https://api.spotify.com/v1/albums/6YlDIxqEjvY63ffH6AwCjd/tracks\",\r\n        cover: \"./images/afterHours.jpg\"\r\n    },\r\n    {\r\n        albumName: \"my dear melancholy.\",\r\n        spotify: \"https://api.spotify.com/v1/albums/4qZBW3f2Q8y0k1A84d4iAO/tracks\",\r\n        cover: \"./images/myDear.jpg\"\r\n    },\r\n    {\r\n        albumName: \"starboy.\",\r\n        spotify: \"https://api.spotify.com/v1/albums/2ODvWsOgouMbaA5xf0RkJe/tracks\",\r\n        cover: \"./images/starboy.jpg\"\r\n    },\r\n    {\r\n        albumName: \"beauty behind the madness.\",\r\n        spotify: \"https://api.spotify.com/v1/albums/36yJ6fcaSCVsK1tybnNizj/tracks\",\r\n        cover: \"./images/beautyMadness.jpg\"\r\n    },\r\n    {\r\n        albumName: \"kiss land.\" ,\r\n        spotify: \"https://api.spotify.com/v1/albums/6wRev1uYL0JsMsWqktJuVi/tracks\",\r\n        cover: \"./images/kissLand.jpg\"\r\n    },\r\n    {\r\n        albumName: \"trilogy.\",\r\n        spotify: \"https://api.spotify.com/v1/albums/5EbpxRwbbpCJUepbqVTZ1U/tracks\",\r\n        cover: \"./images/Trilogy.jpg\"\r\n    },\r\n]\r\n\r\nexport default albums","import React from 'react';\r\nimport albums from '../albums';\r\nvar keys = require(\"../keys\");\r\nvar Spotify = require('node-spotify-api');\r\n\r\nconsole.log(albums) \r\n\r\n\r\nclass AfterHours extends React.Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        var spotify = new Spotify(keys.spotify);\r\n\r\n        spotify.request(albums[0].spotify)\r\n            .then(res => {\r\n                this.setState({ album: res.items })\r\n                console.log(this.state.album)})\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () { \r\n        return (\r\n            <div className=\"parallax-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s6 m3\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title activator white-text text-darken-4\">View Tracks<i className=\"material-icons right\"></i></span>\r\n                        </div>\r\n                          <div className=\"card-reveal\">\r\n                            <span className=\"card-title grey-text text-darken-4\">Track Listing<i className=\"material-icons right\">close</i></span>\r\n                            {this.state.album.map(tracks =>\r\n                                <p>{tracks.name} <a href={tracks.external_urls.spotify}>Play on Spotify</a></p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"parallax\"><img src={albums[0].cover}></img></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default AfterHours;","import React from 'react';\r\nimport albums from '../albums'\r\nvar keys = require(\"../keys\");\r\nvar Spotify = require('node-spotify-api');\r\n\r\n\r\nclass Melancholy extends React.Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        var spotify = new Spotify(keys.spotify);\r\n        spotify.request(albums[1].spotify)\r\n            .then(res => {\r\n                this.setState({ album: res.items }) \r\n                console.log(this.state.album)})\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"parallax-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s6 m3\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title activator white-text text-darken-4\">View Tracks<i className=\"material-icons right\"></i></span>\r\n                        </div>\r\n                          <div className=\"card-reveal\">\r\n                            <span className=\"card-title grey-text text-darken-4\">Track Listing<i className=\"material-icons right\">close</i></span>\r\n                            {this.state.album.map(tracks =>\r\n                                <p>{tracks.name} <a href={tracks.external_urls.spotify}>Play on Spotify</a></p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"parallax\"><img src={albums[1].cover}></img></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Melancholy;","import React from 'react';\r\nimport albums from '../albums'\r\nvar keys = require(\"../keys\");\r\nvar Spotify = require('node-spotify-api');\r\n\r\n\r\nclass StarBoy extends React.Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        var spotify = new Spotify(keys.spotify);\r\n        spotify.request(albums[2].spotify)\r\n            .then(res => {\r\n                this.setState({ album: res.items }) \r\n                console.log(this.state.album)})\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"parallax-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s6 m3\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title activator white-text text-darken-4\">View Tracks<i className=\"material-icons right\"></i></span>\r\n                        </div>\r\n                          <div className=\"card-reveal\">\r\n                            <span className=\"card-title grey-text text-darken-4\">Track Listing<i className=\"material-icons right\">close</i></span>\r\n                            {this.state.album.map(tracks =>\r\n                                <p>{tracks.name} <a href={tracks.external_urls.spotify}>Play on Spotify</a></p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"parallax\"><img src={albums[2].cover}></img></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default StarBoy;","import React from 'react';\r\nimport albums from '../albums'\r\nvar keys = require(\"../keys\");\r\nvar Spotify = require('node-spotify-api');\r\n\r\n\r\nclass Madness extends React.Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        var spotify = new Spotify(keys.spotify);\r\n        spotify.request(albums[3].spotify)\r\n            .then(res => {\r\n                this.setState({ album: res.items }) \r\n                console.log(this.state.album)})\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"parallax-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s6 m3\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title activator white-text text-darken-4\">View Tracks<i className=\"material-icons right\"></i></span>\r\n                        </div>\r\n                          <div className=\"card-reveal\">\r\n                            <span className=\"card-title grey-text text-darken-4\">Track Listing<i className=\"material-icons right\">close</i></span>\r\n                            {this.state.album.map(tracks =>\r\n                                <p>{tracks.name} <a href={tracks.external_urls.spotify}>Play on Spotify</a></p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"parallax\"><img src={albums[3].cover}></img></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Madness;","import React from 'react';\r\nimport albums from '../albums'\r\nvar keys = require(\"../keys\");\r\nvar Spotify = require('node-spotify-api');\r\n\r\n\r\nclass KissLand extends React.Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        var spotify = new Spotify(keys.spotify);\r\n        spotify.request(albums[4].spotify)\r\n            .then(res => {\r\n                this.setState({ album: res.items }) \r\n                console.log(this.state.album)})\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"parallax-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s6 m3\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title activator white-text text-darken-4\">View Tracks<i className=\"material-icons right\"></i></span>\r\n                        </div>\r\n                          <div className=\"card-reveal\">\r\n                            <span className=\"card-title grey-text text-darken-4\">Track Listing<i className=\"material-icons right\">close</i></span>\r\n                            {this.state.album.map(tracks =>\r\n                                <p>{tracks.name} <a href={tracks.external_urls.spotify}>Play on Spotify</a></p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"parallax\"><img src={albums[4].cover}></img></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default KissLand;","import React from 'react';\r\nimport albums from '../albums'\r\nvar keys = require(\"../keys\");\r\nvar Spotify = require('node-spotify-api');\r\n\r\n\r\nclass Trilogy extends React.Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        var spotify = new Spotify(keys.spotify);\r\n        spotify.request(albums[5].spotify)\r\n            .then(res => {\r\n                this.setState({ album: res.items }) \r\n                console.log(this.state.album)})\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"parallax-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s6 m3\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title activator white-text text-darken-4\">View Tracks<i className=\"material-icons right\"></i></span>\r\n                        </div>\r\n                          <div className=\"card-reveal\">\r\n                            <span className=\"card-title grey-text text-darken-4\">Track Listing<i className=\"material-icons right\">close</i></span>\r\n                            {this.state.album.map(tracks =>\r\n                                <p>{tracks.name} <a href={tracks.external_urls.spotify}>Play on Spotify</a></p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"parallax\"><img src={albums[5].cover}></img></div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Trilogy;","import React from 'react';\r\n\r\nconst Section = (props) => {\r\n    return (\r\n        <div class=\"section white\">\r\n            <div class=\"row container\">\r\n                 <h2 class=\"header center\" id=\"section\" data-aos=\"fade-down\" data-aos-offset=\"300\">{props.albumName}</h2>\r\n            </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport AfterHours from '../Components/AfterHours'\r\nimport Melancholy from '../Components/Melancholy'\r\nimport StarBoy from '../Components/StarBoy'\r\nimport Madness from '../Components/Madness'\r\nimport KissLand from '../Components/KissLand'\r\nimport Trilogy from '../Components/Trilogy'\r\nimport Section from '../Components/Section'\r\nimport '../Pages/style.css'\r\nimport albums from '../albums.js'\r\n\r\n\r\nconst FullPage = () => {\r\n    return (\r\n        <div>\r\n            <Section albumName={albums[0].albumName} />\r\n            <AfterHours />\r\n            <Section albumName={albums[1].albumName} />\r\n            <Melancholy />\r\n            <Section albumName={albums[2].albumName} />\r\n            <StarBoy />\r\n            <Section albumName={albums[3].albumName} />\r\n            <Madness />\r\n            <Section albumName={albums[4].albumName}/>\r\n            <KissLand />\r\n            <Section albumName={albums[5].albumName} />\r\n            <Trilogy />\r\n            <br></br>\r\n            <div className=\"center\">\r\n            <img src=\"./images/xo.jpg\" id=\"weeknd\"></img>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FullPage;","import React from 'react';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport HomePage from './Pages/HomePage'\nimport FullPage from './Pages/FullPage'\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n          <Link to= '/' component={HomePage} />\n          <Link to= '/albums' component={FullPage} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}